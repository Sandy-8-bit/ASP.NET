@page "/chatbot"
@using BlazorWasmApp.Models
@inject HttpClient Http

<h3 class="title">Weather Chatbot</h3>

<div class="chat-container">
    <div class="messages" @ref="MessagesContainer">
        @foreach (var msg in Messages)
        {
            <div class="@($"message {(msg.IsUser ? "user-message" : "bot-message")}")">
                <strong>@(msg.IsUser ? "You" : "Bot"):</strong>
                <span>@msg.Content</span>

                @if (msg.Weather != null)
                {
                    <div class="weather-info">
                        <strong>🌤 Weather Update:</strong>
                        <div>🌡 Temperature: @msg.Weather.Temperature°C</div>
                        <div>💧 Humidity: @msg.Weather.Humidity%</div>
                        <div>🌬 Wind: @msg.Weather.WindSpeed km/h</div>
                    </div>
                }

                <small class="timestamp">@msg.Timestamp.ToString("hh:mm tt")</small>
            </div>
        }

        @if (IsLoading)
        {
            <div class="bot-message typing-indicator">
                <span></span><span></span><span></span>
            </div>
        }
    </div>

    <div class="input-container">
        <input @bind="UserMessage" placeholder="Ask about the weather..." @onkeydown="@HandleEnter" />
        <button @onclick="SendMessage" disabled="@IsLoading">Send</button>
    </div>
</div>

@code {
    private string UserMessage = string.Empty;
    private List<ChatMessage> Messages = new();
    private bool IsLoading = false;
    private ElementReference MessagesContainer;

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserMessage) || IsLoading) return;

        Messages.Add(new ChatMessage { Content = UserMessage, IsUser = true, Timestamp = DateTime.Now });
        IsLoading = true;
        StateHasChanged();

        try
        {
            var request = new { Message = UserMessage };
            var response = await Http.PostAsJsonAsync("api/weatherchat", request);
            var result = await response.Content.ReadFromJsonAsync<ChatResponse>();

            if (result != null)
            {
                Messages.Add(new ChatMessage
                {
                    Content = result.Response,
                    IsUser = false,
                    Timestamp = DateTime.Now,
                    Weather = result.Weather
                });
            }
        }
        catch
        {
            Messages.Add(new ChatMessage { Content = "⚠️ Error connecting to chatbot.", IsUser = false, Timestamp = DateTime.Now });
        }

        IsLoading = false;
        UserMessage = string.Empty;
        await ScrollToBottom();
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") await SendMessage();
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(100); // Small delay to ensure UI updates
        await MessagesContainer.FocusAsync();
    }

    private class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.Now;
        public WeatherResponse? Weather { get; set; }
    }

    private class ChatResponse
    {
        public string Response { get; set; } = string.Empty;
        public WeatherResponse? Weather { get; set; }
    }

    public class WeatherResponse
    {
        public double Temperature { get; set; }
        public int Humidity { get; set; }
        public double WindSpeed { get; set; }
    }
}

<style>
    .title {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
        color: #333;
    }

    .chat-container {
        max-width: 600px;
        margin: auto;
        padding: 15px;
        border-radius: 10px;
        background: #ffffff;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        height: 500px;
    }

    .messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
        background: #f9f9f9;
        border-radius: 8px;
    }

    .message {
        padding: 12px;
        margin: 8px 0;
        border-radius: 10px;
        max-width: 80%;
        position: relative;
        word-wrap: break-word;
    }

    .user-message {
        background: #007bff;
        color: white;
        align-self: flex-end;
        text-align: right;
        margin-left: auto;
    }

    .bot-message {
        background: #e9ecef;
        color: black;
        text-align: left;
        margin-right: auto;
    }

    .weather-info {
        background: rgba(0, 0, 0, 0.05);
        padding: 8px;
        border-radius: 5px;
        margin-top: 5px;
        font-size: 14px;
    }

    .timestamp {
        display: block;
        font-size: 10px;
        color: #666;
        margin-top: 5px;
        text-align: right;
    }

    .input-container {
        display: flex;
        padding-top: 10px;
    }

    input {
        flex-grow: 1;
        padding: 10px;
        border: 2px solid #ddd;
        border-radius: 6px;
        outline: none;
        transition: border 0.3s ease-in-out;
    }

    input:focus {
        border-color: #007bff;
    }

    button {
        padding: 10px 15px;
        margin-left: 10px;
        border: none;
        background: #007bff;
        color: white;
        border-radius: 6px;
        cursor: pointer;
        transition: background 0.3s ease-in-out;
    }

    button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    button:hover:not(:disabled) {
        background: #0056b3;
    }

    .typing-indicator {
        display: flex;
        align-items: center;
        padding: 8px;
        background: #e9ecef;
        border-radius: 10px;
        max-width: 60px;
    }

    .typing-indicator span {
        width: 8px;
        height: 8px;
        background: #666;
        border-radius: 50%;
        display: inline-block;
        margin: 0 2px;
        animation: blink 1.4s infinite;
    }

    @@keyframes blink {
        0%, 80%, 100% { opacity: 0; }
        40% { opacity: 1; }
    }
</style>
