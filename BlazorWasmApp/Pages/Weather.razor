@page "/weather"
@inject WeatherService WeatherService
@inject FavoriteService FavoriteService
@inject ISnackbar Snackbar
@inject ToasterService Toaster
@inject AuthService AuthService
@using BlazorWasmApp.Services
@using BlazorWasmApp.Models
@using MudBlazor

<div class="weather-container">
    <h3>Weather App</h3>

    <input @bind="city" placeholder="Enter city name" class="weather-input" />
    <button @onclick="GetWeather" class="weather-button" disabled="@IsLoading">Get Weather</button>

    @if (IsLoggedIn && weather != null)
    {
        <button @onclick="GetForecast" class="forecast-button" disabled="@IsLoading">5-Day Forecast</button>
    }

    @if (IsLoading)
    {
        <div class="loading-spinner"></div>
    }

    @if (weather != null)
    {
        <div class="weather-card">
            <h4 class="text-xl font-bold">Weather in @weather.name, @weather.sys.country</h4>
            <p>Temperature: <strong>@weather.main.temp °C</strong></p>
            <p>Condition: @weather.weather[0].main</p>
            <p>Description: @weather.weather[0].description</p>

            @if (IsLoggedIn)
            {
                <p>Feels Like: @weather.main.feels_like °C</p>
                <p>Humidity: @weather.main.humidity%</p>
                <p>Wind: @weather.wind.speed m/s, @weather.wind.deg°</p>
                <p>Sunrise: @ConvertUnixTime(weather.sys.sunrise)</p>
                <p>Sunset: @ConvertUnixTime(weather.sys.sunset)</p>

                <button @onclick="AddToFavorites" class="favorite-button">⭐ Add to Favorites</button>
            }

            @if (weather.weather[0].main == "Rain")
            {
                <button @onclick="SendRainNotification" class="alert-button">🌧️ Send Rain Alert</button>
            }
        </div>
    }

    @if (forecast != null && ShowForecast)
    {
        <div class="forecast-container">
            <h4 class="text-xl font-bold">5-Day Forecast</h4>
            <ul>
                @foreach (var item in forecast.list)
                {
                    <li>@item.dt_txt - @item.main.temp °C, @item.weather[0].description</li>
                }
            </ul>
            <button @onclick="CloseForecast" class="close-button">Close Forecast</button>
        </div>
    }
</div>

@code {
    private string city = "";
    private WeatherResponse? weather;
    private ForecastResponse? forecast;
    private bool IsLoading = false;
    private bool ShowForecast = false;
    private bool IsLoggedIn = false;
    private int searchCount = 0;
    private const int MaxSearchLimit = 5;

    protected override async Task OnInitializedAsync()
    {
        IsLoggedIn = await AuthService.IsUserLoggedIn();
    }

    private async Task GetWeather()
    {
        if (string.IsNullOrWhiteSpace(city))
        {
            Snackbar.Add("Please enter a city name!", Severity.Warning);
            await Toaster.ShowToast("Please enter a city name!", "warning");
            return;
        }

        if (!IsLoggedIn && searchCount >= MaxSearchLimit)
        {
            Snackbar.Add("Search limit reached! Please log in for unlimited searches.", Severity.Error);
            await Toaster.ShowToast("Search limit reached! Please log in for unlimited searches.", "error");
            return;
        }

        IsLoading = true;
        StateHasChanged();

        weather = await WeatherService.GetWeatherAsync(city);
        IsLoading = false;

        if (weather != null)
        {
            Snackbar.Add($"Weather data retrieved for {city}", Severity.Info);
            await Toaster.ShowToast($"Weather data retrieved for {city}", "success");
            searchCount++;
        }
        else
        {
            Snackbar.Add("City not found or API error!", Severity.Error);
            await Toaster.ShowToast("City not found or API error!", "error");
        }
    }

    private async Task GetForecast()
    {
        if (!IsLoggedIn)
        {
            Snackbar.Add("Log in to view the 5-day forecast!", Severity.Warning);
            await Toaster.ShowToast("Log in to view the 5-day forecast!", "warning");
            return;
        }

        if (weather == null)
        {
            Snackbar.Add("Get current weather first!", Severity.Warning);
            return;
        }

        IsLoading = true;
        StateHasChanged();

        forecast = await WeatherService.GetFiveDayForecastAsync(city);
        IsLoading = false;
        ShowForecast = true;

        if (forecast != null)
        {
            Snackbar.Add("5-Day Forecast retrieved!", Severity.Info);
            await Toaster.ShowToast("5-Day Forecast retrieved!", "success");
        }
        else
        {
            Snackbar.Add("Could not fetch forecast!", Severity.Error);
            await Toaster.ShowToast("Could not fetch forecast!", "error");
        }
    }

    private void CloseForecast()
    {
        ShowForecast = false;
    }

    private async Task AddToFavorites()
    {
        if (!string.IsNullOrWhiteSpace(city))
        {
            bool added = await FavoriteService.AddFavoriteCityAsync(city);

            if (added)
            {
                Snackbar.Add($"{city} added to favorites!", Severity.Success);
                await Toaster.ShowToast($"{city} added to favorites!", "success");
            }
            else
            {
                Snackbar.Add($"{city} is already in your favorites.", Severity.Warning);
                await Toaster.ShowToast($"{city} is already in your favorites.", "warning");
            }
        }
    }

    private async Task SendRainNotification()
    {
        if (weather != null)
        {
            await WeatherService.SendRainNotificationEmailAsync("user@example.com", city, weather.weather[0].description);
            Snackbar.Add("Rain alert sent successfully!", Severity.Success);
            await Toaster.ShowToast("Rain alert sent successfully!", "success");
        }
    }

    private string ConvertUnixTime(int unixTime)
    {
        return DateTimeOffset.FromUnixTimeSeconds(unixTime).ToLocalTime().ToString("HH:mm");
    }
}

<style>
    .weather-container {
        max-width: 600px;
        margin: 30px auto;
        padding: 20px;
        background: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

        .weather-container h3 {
            color: #007BFF;
            margin-bottom: 15px;
        }

    .weather-input {
        width: 70%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .weather-button, .forecast-button, .close-button {
        padding: 8px 15px;
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s;
        margin-top: 5px;
    }

        .weather-button:hover, .forecast-button:hover, .close-button:hover {
            background-color: #0056b3;
        }

    .weather-card {
        margin-top: 20px;
        padding: 15px;
        background: #eef2f7;
        border-radius: 10px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    }

    .loading-spinner {
        width: 30px;
        height: 30px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #007BFF;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 10px auto;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>
